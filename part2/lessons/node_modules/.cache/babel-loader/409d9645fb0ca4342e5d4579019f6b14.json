{"ast":null,"code":"var _jsxFileName = \"/Users/hamirizafirdhanardyasta/Documents/Hamiriza's/fullstackopen/part2/lessons/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst express = require(\"express\");\n\nconst app = express();\napp.use(express.json());\n\nconst requestLogger = (request, response, next) => {\n  console.log(\"Method:\", request.method);\n  console.log(\"Path: \", request.path);\n  console.log(\"Body: \", request.body);\n  console.log(\"--\");\n  next();\n};\n\napp.use(requestLogger);\nlet notes = [{\n  id: 1,\n  content: \"HTML is easy\",\n  date: \"2019-05-30T17:30:31.098Z\",\n  important: true\n}, {\n  id: 2,\n  content: \"Browser can execute only Javascript\",\n  date: \"2019-05-30T18:39:34.091Z\",\n  important: false\n}, {\n  id: 3,\n  content: \"GET and POST are the most important methods of HTTP protocol\",\n  date: \"2019-05-30T19:20:14.298Z\",\n  important: true\n}];\napp.get(\"/\", (request, response) => {\n  response.send(\"<h1>Hello World!</h1>\");\n});\napp.get(\"/api/notes\", (request, response) => {\n  response.json(notes);\n});\napp.get(\"/api/notes/:id\", (request, response) => {\n  const id = Number(request.params.id);\n  const note = notes.find(note => note.id === id);\n\n  if (note) {\n    response.json(note);\n  } else {\n    response.status(404).end();\n  }\n});\napp.delete(\"/api/notes/:id\", (request, response) => {\n  const id = Number(request.params.id);\n  notes = notes.filter(note => note.id !== id);\n  response.status(204).end();\n});\napp.post(\"/api/notes\", (request, response) => {\n  const body = request.body;\n\n  if (!body.content) {\n    return response.status(400).json({\n      error: \"content missing\"\n    });\n  }\n\n  const note = {\n    content: body.content,\n    important: body.important || false,\n    date: new Date(),\n    id: generateId()\n  };\n  notes = notes.concat(note);\n  response.json(note);\n});\n\nconst generateId = () => {\n  const maxId = notes.length > 0 ? Math.max(...notes.map(n => n.id)) : 0;\n  return maxId + 1;\n};\n\nconst unknownEndpoint = (request, response) => {\n  response.status(404).send({\n    error: \"unknown endpoint\"\n  });\n};\n\napp.use(unknownEndpoint);\nconst PORT = 3001;\napp.listen(PORT);\nconsole.log(`Server running on port ${PORT}`);\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 103,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/hamirizafirdhanardyasta/Documents/Hamiriza's/fullstackopen/part2/lessons/src/index.js"],"names":["React","ReactDOM","App","express","require","app","use","json","requestLogger","request","response","next","console","log","method","path","body","notes","id","content","date","important","get","send","Number","params","note","find","status","end","delete","filter","post","error","Date","generateId","concat","maxId","length","Math","max","map","n","unknownEndpoint","PORT","listen","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\nconst express = require(\"express\");\nconst app = express();\n\napp.use(express.json());\n\nconst requestLogger = (request, response, next) => {\n  console.log(\"Method:\", request.method);\n  console.log(\"Path: \", request.path);\n  console.log(\"Body: \", request.body);\n  console.log(\"--\");\n  next();\n};\n\napp.use(requestLogger);\n\nlet notes = [\n  {\n    id: 1,\n    content: \"HTML is easy\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  },\n  {\n    id: 2,\n    content: \"Browser can execute only Javascript\",\n    date: \"2019-05-30T18:39:34.091Z\",\n    important: false,\n  },\n  {\n    id: 3,\n    content: \"GET and POST are the most important methods of HTTP protocol\",\n    date: \"2019-05-30T19:20:14.298Z\",\n    important: true,\n  },\n];\n\napp.get(\"/\", (request, response) => {\n  response.send(\"<h1>Hello World!</h1>\");\n});\n\napp.get(\"/api/notes\", (request, response) => {\n  response.json(notes);\n});\n\napp.get(\"/api/notes/:id\", (request, response) => {\n  const id = Number(request.params.id);\n  const note = notes.find((note) => note.id === id);\n\n  if (note) {\n    response.json(note);\n  } else {\n    response.status(404).end();\n  }\n});\n\napp.delete(\"/api/notes/:id\", (request, response) => {\n  const id = Number(request.params.id);\n  notes = notes.filter((note) => note.id !== id);\n\n  response.status(204).end();\n});\n\napp.post(\"/api/notes\", (request, response) => {\n  const body = request.body;\n\n  if (!body.content) {\n    return response.status(400).json({\n      error: \"content missing\",\n    });\n  }\n\n  const note = {\n    content: body.content,\n    important: body.important || false,\n    date: new Date(),\n    id: generateId(),\n  };\n\n  notes = notes.concat(note);\n\n  response.json(note);\n});\n\nconst generateId = () => {\n  const maxId = notes.length > 0 ? Math.max(...notes.map((n) => n.id)) : 0;\n  return maxId + 1;\n};\n\nconst unknownEndpoint = (request, response) => {\n  response.status(404).send({ error: \"unknown endpoint\" });\n};\n\napp.use(unknownEndpoint);\n\nconst PORT = 3001;\napp.listen(PORT);\nconsole.log(`Server running on port ${PORT}`);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}